using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraNavBar;
using wayeal.os.exhaust.ViewModel;
using DevExpress.Mvvm;
using Wayee.Services;
using wayeal.os.exhaust.Services;
using System.IO;

namespace wayeal.os.exhaust.Modules
{
    public partial class ucConcentrationCalibrator : ucManagerBase
    {
        #region defines
        ModulesNavigator viewNavigator = null;
        private ControlCollection _settingControl = null;
        public static List<Control> SettingControl { get; } = new List<Control>();

        public static Dictionary<Control, string> DicRecordLog
        {
            get { return _dicRecordLog; }
            set { _dicRecordLog = value; }
        }
        static Dictionary<Control, string> _dicRecordLog = new Dictionary<Control, string>();
        #endregion
        public ucConcentrationCalibrator()
        {
            InitializeComponent();
            InitializeUI();
            SetPointCorrectView();
            _settingControl = tpSettings.Controls;
            InitSettingControl(tpSettings.Controls);
            InitDictionary(_settingControl);
            if (!mvvmContext1.IsDesignMode) InitializeBindings();
        }

        private void SetPointCorrectView()
        {
            try
            {
                string dbPath = System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase;
                if (!File.Exists(dbPath + "certification.txt"))
                {
                    (ucCalibration.Controls.Find("sbPointCorrect", true)[0]).Size = new Size(0,0);
                    (ucCalibration.Controls.Find("sbPointCorrect", true)[0]).Enabled = false;
                    ucCalibration.Controls.Remove(ucCalibration.Controls.Find("sbPointCorrect", true)[0]);
                }
            }
            catch(Exception ex)
            {
                ErrorLog.Error(ex.ToString());
            }
        }

        /// <summary>
        /// Init
        /// </summary>
        protected override void InitializeBindings()
        {
            try
            {
                viewNavigator = new ModulesNavigator(Program.frmMain.Ribbon, pcClient);
               

                InitBarItemLinks();

                mvvmContext1.SetViewModel(typeof(CalibrationViewModel.DebugModel), CalibrationViewModel.VM.Debug);
                var fluent = mvvmContext1.OfType<CalibrationViewModel.DebugModel>();
                AddBinding(fluent.SetBinding(sbExitCalibrationMode, uc => uc.Visible, x => x.Mode));
                AddBinding(fluent.SetBinding(rgSpectralView, r => r.SelectedIndex, x => x.Type));

                Messenger.Default.Register<string>(this, typeof(CalibrationViewModel.DebugModel).Name, action);
                CalibrationViewModel.VM.ModelChanged += (sender, arg) => {
                    if (arg.ModelName == typeof(CalibrationViewModel.DebugModel).Name)
                        action();
                };
                base.InitializeBindings();
            }
            catch (Exception ex)
            {
                ErrorLog.Error(ex.StackTrace.ToString());
            }
        }
        /// <summary>
        /// mvvm action
        /// </summary>
        /// <param name="json"></param>
        protected override void doAction(string json = "")
        {
            base.doAction(json);
            tmCalibrateMonitor.Enabled = false;
            SetUI();
        }
        /// <summary>
        /// 设置UI状态
        /// </summary>
        private void SetUI(bool flag=true)
        {
            bool v = sbExitCalibrationMode.Visible;
            sbExitCalibrationMode.Enabled = v & flag;
            sbEnterCalibrationMode.Visible = !v;
            sbEnterCalibrationMode.Enabled = !v & flag;

            bool e = sbExitCalibrationMode.Enabled;
            ucCalibrationParamter.Enabled = v & e;
            ucCalibration.Enabled = v & e;
            gcUnitSettings.Enabled = v & e;
        }

        /// <summary>
        /// init expriment mode
        /// </summary>
        void InitBarItemLinks()
        {
            rgSpectralView.Properties.Items[0].Tag = new NavBarGroupTagObject(rgSpectralView.Properties.Items[0].Value.ToString(), typeof(UserControls.ucCalibrationHarmonicView));
            rgSpectralView.Properties.Items[1].Tag = new NavBarGroupTagObject(rgSpectralView.Properties.Items[1].Value.ToString(), typeof(UserControls.ucCalibrationSpectrumView));
            rgSpectralView.Properties.Items[2].Tag = new NavBarGroupTagObject(rgSpectralView.Properties.Items[2].Value.ToString(), typeof(UserControls.ucCalibrationConcentrationView));
            rgSpectralView.Properties.Items[3].Tag = new NavBarGroupTagObject(rgSpectralView.Properties.Items[2].Value.ToString(), typeof(UserControls.ucCalibrationDebugView));
            rgSpectralView.SelectedIndex = 0;
        }

        private void rgSpectralView_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (rgSpectralView.Properties.Items[rgSpectralView.SelectedIndex].Tag != null)
                {
                    NavBarItemLink link = new NavBarItemLink(new NavBarItem(rgSpectralView.Properties.Items[rgSpectralView.SelectedIndex].Value.ToString()));
                    link.Item.Tag = rgSpectralView.Properties.Items[rgSpectralView.SelectedIndex].Tag;
                    viewNavigator.ChangeSelectedItem(link, null);
                    rgSpectralView.Enabled = false;
                    Application.DoEvents();
                }
            }
            catch (Exception ex)
            {
                ErrorLog.Error(ex.StackTrace.ToString());
            }
            finally
            {
                rgSpectralView.Enabled = true;
            }
        }
        private void sbCalibrationMode_Click(object sender, EventArgs e)
        {
            try
            {
                bool rs= CalibrationViewModel.VM.SwitchDebugMode(sender == sbEnterCalibrationMode);
                if (sender == sbEnterCalibrationMode)
                {
                    sbEnterCalibrationMode.Enabled = !rs;
                    ErrorLog.SystemLog(DateTime.Now, Program.infoResource.GetLocalizedString(language.InfoId.EnterCalibrationMode), this.OwnerForm.GetUserName());

                    tmCalibrateMonitor.Enabled = true;
                }
                else
                {
                    sbExitCalibrationMode.Enabled = !rs;
                    ErrorLog.SystemLog(DateTime.Now, Program.infoResource.GetLocalizedString(language.InfoId.OutCalibrationMode), this.OwnerForm.GetUserName());

                }
                SetUI(false);
                
            }
            catch (Exception ex)
            {
                ErrorLog.Error(ex.StackTrace.ToString());
            }
        }
        /// <summary>
        /// 初始化目录，获取所有待校准控件的值
        /// </summary>
        private void InitDictionary(ControlCollection cc)
        {
            try
            {
                foreach (Control uc in cc)
                {
                    if (uc.Controls != null) InitDictionary(uc.Controls);
                    if (uc is DevExpress.XtraEditors.TextEdit)
                        _dicRecordLog.Add(uc, uc.Text);
                    if (uc is DevExpress.XtraEditors.CheckEdit)
                        _dicRecordLog.Add(uc, (uc as DevExpress.XtraEditors.CheckEdit).EditValue.ToString());
                    if (uc is DevExpress.XtraEditors.ComboBoxEdit)
                        _dicRecordLog.Add(uc, (uc as DevExpress.XtraEditors.ComboBoxEdit).SelectedItem.ToString());
                }
            }
            catch(Exception ex)
            {
                ErrorLog.Error(ex.ToString());
            }
        }
        private void InitSettingControl(ControlCollection cc)
        {
            foreach (Control uc in cc)
            {
                if (uc.Controls != null) InitSettingControl(uc.Controls);
                if (uc is DevExpress.XtraEditors.LabelControl&&!SettingControl.Contains(uc))
                    SettingControl.Add(uc);
            }
        }

        private void tmCalibrateMonitor_Tick(object sender, EventArgs e)
        {
            try
            {
                tmCalibrateMonitor.Enabled = false;
                if (!sbEnterCalibrationMode.Enabled && sbEnterCalibrationMode.Visible) sbEnterCalibrationMode.Enabled = true ;
            }
            catch (Exception ex)
            {
                ErrorLog.Error(ex.ToString());
            }
        }
        
    }
}
