using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.Utils.MVVM;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid;

namespace wayeal.os.exhaust.UserControls
{
    public partial class ucBase : BaseModule
    {
        private bool _Dispose = false;
        protected bool _Busy = false;
        protected List<IPropertyBinding> _BindingList = new List<IPropertyBinding>();
        protected Dictionary<string, IPropertyBinding> _BindingList2 = new Dictionary<string, IPropertyBinding>();

        public ucBase()
        {
            try
            {
                InitializeComponent();
            }
            catch (Exception ex)
            {
                ErrorLog.Error(ex.StackTrace.ToString());
            }
        }

        ~ucBase()
        {
            _Dispose = true;
        }

        //protected override void OnVisibleChanged(EventArgs e)
        //{
        //    if (this.Visible) action();
        //    base.OnVisibleChanged(e);            
        //}

        protected virtual void InitializeUI()
        {
            Program.resourceManager.ApplyLanguage(this);
            Program.permissionManager.ApplyPermission(this);
            Program.toolTipManager.ApplyLanguage(this);
            Program.validateManager.ApplyRegex(this);
        }

        /// <summary>
        /// Init
        /// </summary>
        protected virtual void InitializeBindings()
        {
            doAction();
        }
        /// <summary>
        /// 增加绑定
        /// </summary>
        /// <param name="binding">绑定结果</param>
        protected virtual void AddBinding(IPropertyBinding binding)
        {
            _BindingList.Add(binding);
        }
        /// <summary>
        /// 增加绑定
        /// </summary>
        /// <param name="controlName">控件名</param>
        /// <param name="binding">绑定结果</param>
        protected virtual void AddBinding(string controlName, IPropertyBinding binding)
        {
            _BindingList2.Add(controlName, binding);
        }

        private delegate void doActionDelegate(string json);
        /// <summary>
        /// mvvm action
        /// </summary>
        /// <param name="json"></param>
        protected virtual void action(string json = "")
        {
            try
            {
                //GC.Collect();
                if (_Dispose) return;

                if (this.InvokeRequired)
                {
                    doActionDelegate d = new doActionDelegate(doAction);
                    this.BeginInvoke(d, json);
                }
                else
                {
                    if (_Busy) return;
                    try
                    {
                        _Busy = true;
                        doAction(json);
                    }
                    finally
                    {
                        _Busy = false;
                    }
                }
            }
            catch { }
        }

        protected virtual void doAction(string json = "")
        {
            try
            {
                foreach (IPropertyBinding b in _BindingList) if (b != null) b.UpdateTarget();
                
                object o = null;
                foreach (string k in _BindingList2.Keys)
                {
                    o = this.GetType().GetField(k, System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.IgnoreCase).GetValue(this);
                    if ((o is TextEdit && !(o as TextEdit).IsEditorActive) || (o is ComboBoxEdit && !(o as ComboBoxEdit).IsPopupOpen) || (o is CheckEdit && !(o as CheckEdit).IsEditorActive))
                    {
                        try
                        {
                            if (_BindingList2[k] != null) _BindingList2[k].UpdateTarget();
                        }
                        catch (Exception e)
                        {

                        }
                    }
                    else if (o is GridControl && (o as GridControl).Tag == null)
                    {
                        try
                        {
                            if (_BindingList2[k] != null) _BindingList2[k].UpdateTarget();
                        }
                        catch (Exception e)
                        {

                        }
                    }
                }
            }
            catch { }
        }
    }
}
